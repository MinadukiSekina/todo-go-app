// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecases/todoUsecase.go
//
// Generated by this command:
//
//	mockgen -source=app/usecases/todoUsecase.go -destination=app/mock/mockTodoUsecase.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	reflect "reflect"

	models "github.com/MinadukiSekina/todo-go-app/app/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTodoUsecase is a mock of TodoUsecase interface.
type MockTodoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTodoUsecaseMockRecorder
	isgomock struct{}
}

// MockTodoUsecaseMockRecorder is the mock recorder for MockTodoUsecase.
type MockTodoUsecaseMockRecorder struct {
	mock *MockTodoUsecase
}

// NewMockTodoUsecase creates a new mock instance.
func NewMockTodoUsecase(ctrl *gomock.Controller) *MockTodoUsecase {
	mock := &MockTodoUsecase{ctrl: ctrl}
	mock.recorder = &MockTodoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoUsecase) EXPECT() *MockTodoUsecaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTodoUsecase) Add(todo *models.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTodoUsecaseMockRecorder) Add(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTodoUsecase)(nil).Add), todo)
}

// Delete mocks base method.
func (m *MockTodoUsecase) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoUsecaseMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoUsecase)(nil).Delete), id)
}

// Edit mocks base method.
func (m *MockTodoUsecase) Edit(todo *models.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockTodoUsecaseMockRecorder) Edit(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockTodoUsecase)(nil).Edit), todo)
}

// SearchByID mocks base method.
func (m *MockTodoUsecase) SearchByID(arg0 uint) (*models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByID", arg0)
	ret0, _ := ret[0].(*models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByID indicates an expected call of SearchByID.
func (mr *MockTodoUsecaseMockRecorder) SearchByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByID", reflect.TypeOf((*MockTodoUsecase)(nil).SearchByID), arg0)
}

// Show mocks base method.
func (m *MockTodoUsecase) Show() (*[]models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show")
	ret0, _ := ret[0].(*[]models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockTodoUsecaseMockRecorder) Show() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockTodoUsecase)(nil).Show))
}
